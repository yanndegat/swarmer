#!/bin/bash
BASEDIR=$(readlink -f "$(dirname "$0")")
STACK="$1"
CLIENTIP="$2"
CERTDIR=${CERTDIR:-"$HOME/.swarmer/$STACK"}

if [ -z "$STACK" ]; then
    echo "usage: $BASEDIR/swarmer.sh STACK [CLIENTIP]"
    echo "It will generate the CA cert and a client cert in the $HOME/.swarmer/STACK directory."
    exit 1
fi

mkdir -p "$CERTDIR"

if [ ! -z "$(find "$CERTDIR" -type f -name "*.pem")" ]; then
    echo "$CERTDIR is not empty. Aborting."
    exit 1
fi

## CN,OU,Hostnames must be named after flocker's convention
## Ask flockerz : https://github.com/ClusterHQ/flocker/blob/master/flocker/ca/_ca.py
## Warning! Flocker impl doesn't support wildcard DNS.

OU=$(uuidgen)

cat > "$CERTDIR"/run.sh <<EOF
pushd $CERTDIR
echo generating CACERT
echo '{"names":[{"OU":"$OU"}],"CN":"$STACK","key":{"algo":"rsa","size":2048}}' | cfssl gencert -initca - | cfssljson -bare ca -
echo '{"signing":{"default":{"expiry":"100000h","usages":["client auth"]}}}' > req.json
echo generating CLIENT Cert
if [ ! -z "$CLIENTIP" ]; then
   echo '{"CN":"user-$STACK","names":[{"OU":"$OU"}],"hosts":["$CLIENTIP"],"key":{"algo":"rsa","size":2048}}' | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=req.json -hostname $CLIENTIP - | cfssljson -bare "client"
else
   echo '{"CN":"user-$STACK","names":[{"OU":"$OU"}],"key":{"algo":"rsa","size":2048}}' | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=req.json - | cfssljson -bare "client"
fi
# move files for docker DOCKER_CERT_PATH compatibiliy
mv client.pem cert.pem
mv client-key.pem key.pem
popd
EOF

chmod +x "$CERTDIR/run.sh"

which cfssl > /dev/null 2>&1
if [ $? -eq 0 ]; then
    "$CERTDIR/run.sh"
else
    which docker > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        docker run --rm -v "$CERTDIR":"$CERTDIR" --entrypoint /bin/bash cfssl/cfssl -c "$CERTDIR/run.sh"
    else
        echo "couldn't find nor cfssl nor docker binary." >&2
        exit 1
    fi
fi

sudo chown -R "$USER":"$USER" "$CERTDIR"
find "$CERTDIR" -type f -exec chmod 0600 {} \;
rm -f "$CERTDIR/run.sh"

if [ -f "$CERTDIR/cert.pem" ] && [ -f "$CERTDIR/key.pem" ]; then
    echo "Generating PKCS12 cert to use in browser"
    openssl pkcs12 -inkey "$CERTDIR/key.pem" -in "$CERTDIR/cert.pem" -export -out "$CERTDIR/client.pfx"
fi

echo "certs are in $(readlink -f "$CERTDIR")"
