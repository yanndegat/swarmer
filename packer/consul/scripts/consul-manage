#!/bin/bash

SERVICE_NAME="consul"
CONSUL_CLUSTER_SIZE=3
CONSUL_MODE="server"
CONSUL_SERVER_OPTS="-server -bootstrap-expect $CONSUL_CLUSTER_SIZE"
CONSUL_DATADIR="/var/lib/consul"
CONSUL_OPTS="-data-dir $CONSUL_DATADIR -domain swarmer"
ADMIN_NETWORK="default"
CONSUL_BIN=$(readlink -f $(dirname $0))/consul

if [[ -f "/etc/consul/consul.conf" ]]; then
    . /etc/consul/consul.conf
fi

if [[ ! -x $CONSUL_BIN ]]; then
    echo "can't find executable consul bin."
    exit 1
fi

if [[ ! -d $CONSUL_DATADIR ]]; then
    mkdir -p $CONSUL_DATADIR
fi

verbose=0

HOSTIP=$(gethostadminipaddr)


# Usage info
show_help() {
cat << EOF
Usage: ${0##*/} [-ahv] [-j JOINIPADDR] [-c CLUSTER_SIZE] start|stop
Handles the lifecycle of a consul agent

COMMANDS:
    start              Starts a consul agent
    stop               Stops a consul agent
OPTIONS:
    -a                 agent mode only
    -c CLUSTER_SIZE    sets the cluster size expected.
                       Defaults to $CONSUL_CLUSTER_SIZE
    -h                 display this help and exit
    -j JOINIPADDR      sets the join ADDR
                       defaults to /etc/consul/joinaddr.conf
    -v                 verbose mode. Can be used multiple
                       times for increased verbosity.
EOF
}

start() {
    stop

    case $CONSUL_MODE in
        agent)
            CONSUL_OPTS="$CONSUL_OPTS"
        ;;
        server)
            CONSUL_OPTS="$CONSUL_SERVER_OPTS $CONSUL_OPTS"
        ;;
        *)
            logger -t "$SERVICE_NAME" "Unsupported mode $CONSUL_MODE. Choose either agent|server. Exiting."
            exit 7
        ;;
    esac

    JOIN=$(getjoinipaddr)
    if [[ $? == 0 ]]; then
        CONSUL_OPTS="$CONSUL_OPTS -retry-join=$JOIN -rejoin"
    fi

    CONSUL_OPTS="$CONSUL_OPTS -advertise=$HOSTIP -client=0.0.0.0"

    logger -t "$SERVICE_NAME" "Starting agent with opts: $CONSUL_OPTS"
    $CONSUL_BIN agent $CONSUL_OPTS
}

getjoinipaddr(){
    JOIN=$(peers)

    if [[ ! -z $JOIN ]]; then
        echo $JOIN
    elif [[ -z $JOIN ]] && [[ ! -z $JOINIPADDR ]]; then
        echo "$JOINIPADDR"
    else
        return 1
    fi
}

gethostadminipaddr(){
    # Keep trying to retrieve IP addr until it succeeds. Timeouts after 1m
    now=$(date +%s)
    timeout=$(( now + 60 ))
    set +e
    while :; do
        if [[ $timeout -lt $(date +%s) ]]; then
            logger -t "$SERVICE_NAME" "Could not retrieve IP Address. Exiting"
            exit 5
        fi
        ip route | grep -q "^$ADMIN_NETWORK"
        [ $? -eq 0 ] && break
        sleep 1
    done

    printf "$(ip route | grep "^$ADMIN_NETWORK" | sed 's/.*src \([0-9\.]*\) .*/\1/g')"
}

stop() {
    $CONSUL_BIN leave
}

peers() {
    if [ -d $CONSUL_DATADIR/raft ] && [ -f $CONSUL_DATADIR/raft/peers.json ]; then
        cat $CONSUL_DATADIR/raft/peers.json | jq '.[]' | paste -d , -s | sed 's/"//g'| sed 's/:8300//g' | sed "s/$HOSTIP[,]*//g"
    fi
}

OPTIND=1 # Reset is necessary if getopts was used previously in the script.  It is a good idea to make this local in a function.
while getopts ":ahv:c:j:" opt; do
    case "$opt" in
        a)  CONSUL_MODE="agent"
            ;;
        h)
            show_help
            exit 0
            ;;
        v)  verbose=$((verbose+1))
            ;;
        c)  CONSUL_CLUSTER_SIZE=$OPTARG
            ;;
        j)  JOINIPADDR=$OPTARG
            ;;
        '?')
            show_help >&2
            exit 1
            ;;
    esac
done
shift "$((OPTIND-1))" # Shift off the options and optional --.

case $1 in
    start)
        logger -t "$SERVICE_NAME" "start"
        start
        ;;
    stop)
        logger -t "$SERVICE_NAME" "stop"
        stop
        ;;
    *)
        echo "unhandled command: $1" >&2
        exit 2
        ;;
esac
