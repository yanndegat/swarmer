#!/bin/bash -e
if [[ -f "/etc/swarmer/swarmer.conf" ]]; then
    source /etc/swarmer/swarmer.conf
fi

REGISTRY_VERSION=${REGISTRY_VERSION:-2}

consul() {
    METHOD=$1
    shift
    path=$1
    shift
    curl --fail \
         --cacert /etc/swarmer/certs/cluster.crt \
         --cert /etc/swarmer/certs/client.crt \
         --key /etc/swarmer/certs/client.key \
         -"X$METHOD" "https://consul.service.$DATACENTER.$STACK_NAME:8500/v1$path" "$@"
}

consul-unlock(){
    SESSION_ID=$(cat /var/run/registry.session)
    if [ ! -z "$SESSION_ID" ]; then
        consul PUT "/kv/swarmer/start-registry-lock?release=$SESSION_ID" 2>/dev/null
    fi
}

consul-new-session(){
    TMPFILE=$(mktemp)
    cat > "$TMPFILE" <<EOF
{"Name":"$(hostname)", "TTL": "120s", "LockDelay" : "120s"}
EOF
    consul PUT "/session/create" \
           -d @"$TMPFILE" 2>/dev/null | jq '.ID' | sed 's/"//g' > /var/run/registry.session
    rm "$TMPFILE"
    cat /var/run/registry.session
}

consul-lock(){
    SESSION_ID=$(cat /var/run/registry.session)
    if [ ! -z "$SESSION_ID" ]; then
        consul PUT "/session/renew/$SESSION_ID"
        if [ $? != 0 ]; then
            SESSION_ID=$(consul-new-session)
        fi
    else
        SESSION_ID=$(consul-new-session)
    fi

    LOCKED=$(consul PUT "/kv/swarmer/start-registry-lock?acquire=$SESSION_ID" 2>/dev/null)

    if [[ "$LOCKED" != "true" ]]; then
        log user.error "lock already acquired".
        exit 1
    else
        log user.info "lock acquired for session $SESSION_ID"
    fi
}

log(){
   logger -s -t "registry" -p "$@"
}

# Usage info
show_help() {
cat << EOF
Usage: ${0##*/} [-hv] start|stop|check|register
Handles the lifecycle of a docker registry

COMMANDS:
    start              Starts a docker registry
    stop               Stops a docker registry
    register           Registers registry in consul
    check              Checks if registry is running
    consul-lock        Puts a lock in consul
    consul-unlock      Removes a lock in consul

OPTIONS:
    -h                 display this help and exit
    -v                 verbose mode. Can be used multiple
                       times for increased verbosity.
EOF
}

start(){
    log user.info "start"
    if [ "$(consul GET /catalog/service/registry | jq '.|length')" != 0 ]; then
        log user.info "registry already registered in consul, surely by another host. Nothing to do."
        exit 1
    fi

    rkt run \
        --net=host \
        --volume cacerts,kind=host,source=/etc/ssl/certs,readOnly=true \
        --mount volume=cacerts,target=/etc/ssl/certs \
        --volume conf,kind=host,source=/etc/docker/registry/config.yml,readOnly=true \
        --mount volume=conf,target=/etc/docker/registry/config.yml \
        --volume certs,kind=host,source=/etc/swarmer/certs,readOnly=true \
        --mount volume=certs,target=/certs \
        --set-env REGISTRY_HTTP_TLS_CERTIFICATE="/certs/control-registry.service.$DATACENTER.$STACK_NAME.crt" \
        --set-env REGISTRY_HTTP_TLS_KEY="/certs/control-registry.service.$DATACENTER.$STACK_NAME.key" \
        --uuid-file-save /var/run/registry.uuid \
        "registry-1.docker.io/library/registry:$REGISTRY_VERSION" --exec /bin/registry -- \
        serve /etc/docker/registry/config.yml
}

register(){
    #registers in consul
    TMPFILE=$(mktemp)
    cat > "$TMPFILE" <<EOF
{
  "Name": "registry",
  "Address": "$IP",
  "Port": 5000,
  "Check": {
    "Script": "/opt/swarmer/registry-manage",
    "Interval": "10s"
  }
}
EOF
    consul PUT "/agent/service/register" -d @"$TMPFILE" 2>/dev/null
    rm "$TMPFILE"
}

check(){
    /usr/bin/curl --fail \
         --cacert /etc/swarmer/certs/cluster.crt \
         --cert /etc/swarmer/certs/client.crt \
         --key /etc/swarmer/certs/client.key \
         -XGET "https://registry.service.$DATACENTER.${STACK_NAME}:5000/"
}

stop() {
    log user.info "stop"
    if [ -f /var/run/registry.uuid ]; then
        sudo machinectl kill "rkt-$(cat /var/run/registry.uuid)"
    fi
}

touch /var/run/registry.session

OPTIND=1 # Reset is necessary if getopts was used previously in the script.  It is a good idea to make this local in a function.
while getopts ":hv:n:" opt; do
    case "$opt" in
        h)
            show_help
            exit 0
            ;;
        v)  verbose=$((verbose+1))
            ;;
        '?')
            show_help >&2
            exit 2
            ;;
    esac
done

shift "$((OPTIND-1))" # Shift off the options and optional --.

case $1 in
    start)
        start
        ;;
    stop)
        stop
        ;;
    consul-lock)
        consul-lock
        ;;
    consul-unlock)
        consul-unlock
        ;;
    check)
        check
        ;;
    register)
        register
        ;;
    *)
        check
        ;;
esac
