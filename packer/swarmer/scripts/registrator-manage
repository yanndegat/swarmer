#!/bin/bash
if [[ -f "/etc/swarmer/swarmer.conf" ]]; then
    source /etc/swarmer/swarmer.conf
fi

REGISTRATOR_VERSION="latest"
ADMIN_NETWORK=${ADMIN_NETWORK:-default}
PUBLIC_NETWORK=${PUBLIC_NETWORK:-default}
verbose=0

log(){
   logger -s -t "registrator" -p "$@"
}


# Usage info
show_help() {
cat << EOF
Usage: ${0##*/} [-hv] [-n CONTAINER_NAME] start|stop|join
Handles the lifecycle of a registrator service docker container

COMMANDS:
    start              Starts a registrator
    stop               Stops a registrator

OPTIONS:
    -h                 display this help and exit
    -n CONTAINER_NAME  sets the name of the docker container.
                       Defaults to $REGISTRATOR_CONTAINER_NAME
    -v                 verbose mode. Can be used multiple
                       times for increased verbosity.
EOF
}

getpubipaddr(){
    # Keep trying to retrieve IP addr until it succeeds. Timeouts after 1m
    now=$(date +%s)
    timeout=$(( now + 60 ))
    set +e
    while :; do
        if [[ $timeout -lt $(date +%s) ]]; then
            log user.error "Could not retrieve IP Address. Exiting"
            exit 5
        fi
        ip route | grep -q "^$PUBLIC_NETWORK"
        [ $? -eq 0 ] && break
        sleep 1
    done

    ip route | grep "^$PUBLIC_NETWORK" | sed 's/.*src \([0-9\.]*\) .*/\1/g'
}

gethostadminipaddr(){
    # Keep trying to retrieve IP addr until it succeeds. Timeouts after 1m
    now=$(date +%s)
    timeout=$(( now + 60 ))
    set +e
    while :; do
        if [[ $timeout -lt $(date +%s) ]]; then
            log user.error "Could not retrieve IP Address. Exiting"
            exit 5
        fi
        ip route | grep -q "^$ADMIN_NETWORK"
        [ $? -eq 0 ] && break
        sleep 1
    done

    ip route | grep "^$ADMIN_NETWORK" | sed 's/.*src \([0-9\.]*\) .*/\1/g'
}

start(){
    log user.info "start"
    rkt run \
        --volume hosts,kind=host,source=/etc/hosts,readOnly=true \
        --volume dockersocket,kind=host,source=/var/run/docker.sock,readOnly=true \
        --volume cacert,kind=host,source=/etc/swarmer/certs/cluster.crt,readOnly=true \
        --volume cert,kind=host,source=/etc/swarmer/certs/client.crt,readOnly=true \
        --volume key,kind=host,source=/etc/swarmer/certs/client.key,readOnly=true \
        --mount volume=hosts,target=/etc/hosts \
        --mount volume=dockersocket,target=/tmp/docker.sock \
        --mount volume=cacert,target=/tmp/cacert \
        --mount volume=cert,target=/tmp/cert \
        --mount volume=key,target=/tmp/key \
        --uuid-file-save /var/run/registrator.uuid \
        --set-env=CONSUL_HTTP_SSL=true \
        --set-env=CONSUL_HTTP_SSL_VERIFY=true \
        --set-env CONSUL_CACERT=/tmp/cacert \
        --set-env CONSUL_TLSCERT=/tmp/cert \
        --set-env CONSUL_TLSKEY=/tmp/key \
        "registry-1.docker.io/cyprien/registrator:$REGISTRATOR_VERSION" --exec /bin/registrator -- \
        -ip="$(getpubipaddr)" -resync 10 -ttl 10 -ttl-refresh 5 "consul-tls://consul.service.$DATACENTER.$STACK_NAME:8500"
}

stop() {
    log user.info "stop"
    if [ -f /var/run/registrator.uuid ]; then
        sudo machinectl kill "rkt-$(cat /var/run/registrator.uuid)"
    fi
}

OPTIND=1 # Reset is necessary if getopts was used previously in the script.  It is a good idea to make this local in a function.
while getopts ":hv:" opt; do
    case "$opt" in
        h)
            show_help
            exit 0
            ;;
        v)  verbose=$((verbose+1))
            ;;
        '?')
            show_help >&2
            exit 2
            ;;
    esac
done
shift "$((OPTIND-1))" # Shift off the options and optional --.

case $1 in
    start)
        start
        ;;
    stop)
        stop
        ;;
    *)
        echo "unhandled command: $1" >&2
        exit 3
        ;;
esac
